How did viewing a diff between two versions of a file help you see the bug that was introduced?
I used fc as on Windows. This showed there was a typo, without even knowing the code or what it was supposed to do. Without this comparison, I may have assumed that the variable was actually called spacr, and not space.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Sometimes when updating functionality in one part of an application it can have unwanted effects in another part. It would be very useful to go back to the last working copy and see what you did there that may no longer be working.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Knowing that each commit will be a fully working snapshot of the app is of great benefit. To check two versions without knowing if either of them actually were working could be very dangerous. Also, the onyus should be on the user, not the system to decide when to interrupt work and make a save should be.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
Because in some cases the user will only care about versions of one document at a time, other items in the same location are unrelated. this would be the Google Docs model.
For cases when the user has an interest in files which may be interrelated, it will become vital to know that committing one version of a file means that all other files are also committed at the same time. On a large project it would be tedious to have to commit all files individually.

How can you use the commands git log and git diff to view the history of files?
use git log (and git log --stat) to view the history of commits. Each will summarise the changes over previous commit. Any 2 commits can be comapred using git diff, but it makes sense normally to compate successive commits. This will show the changes made between the two.

How might using version control make you more confident to make changes that could break something?
Knowing that any breaking changes are easily able to be removed is a massive comfort. Often there is that moment when trying to fix something, or make a change, and then suddenly nothing works. Face red. Palms sweaty. Manager walking over. To quickly roll back to the working version means you can then blame the problem on a small server outage and keep your job.

Now that you have your workspace set up, what do you want to try using Git for?
I think Git could replace TFS as my version control system. Already I can see a lot of power in it. I like it's simplicity, once set up. The openness of it for open sourcing projects is also very attactive. Especially when it comes to showcasing some of my own completed projects.